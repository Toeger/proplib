- prop::Container:
	- Templated class that can hold different types of objects
		- tuple
		- a known number of them (array)
		- an unknown number of them (vector)
		- other prop::Containers
	- Use CTAD to deduce types
	- Maybe not a good idea after all?
- Possibly change prop::Polywrap to use std::unique_ptr instead of std::shared_ptr
- Specialize prop::Property<volatile T> which does not store the value and instead fetches it every time
- Various Widget_loaders
	- Take ownership
	- Don't take ownership
	- Decide dynamically dependening on input type

- Failed ideas
	- Pull instead of push
	- Dirty flag

- Notable issues
	- std::vector::operator== not SFINAE-friendly, comparability is semi-decidable
	- Inheritance to force members
	- Lack of operator. hurts

- Random gripes
	- std::move_only_function::target does not exist. I need that!
	- name lookup being restricted to closest namespace is extremely annoying

- Fun code
	- auto{std::move(source)}; //prevent infinite recursion
	- std::intptr_t prop::Dependency_tracer::global_base_address = reinterpret_cast<std::intptr_t>(&global_base_address);
	- std::intptr_t prop::Dependency_tracer::stack_base_address = [] {
		int i;
		return reinterpret_cast<std::intptr_t>(std::launder(&i));
	}();
	- std::intptr_t prop::Dependency_tracer::heap_base_address =
		reinterpret_cast<std::intptr_t>(std::launder(std::make_unique<int>().get()));
